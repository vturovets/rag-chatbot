{
  "info": {
    "_postman_id": "c0a88888-0000-0000-0000-debugpipeline",
    "name": "RAG Chatbot Debug Pipeline",
    "description": "Postman collection covering the debug pipeline stages described in Section 7.4 of the RAG Chatbot SRS.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Health Check",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/health",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "health"
          ]
        }
      }
    },
    {
      "name": "Upload Sample PDF",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "if (pm.response.code === 200) {",
              "  const data = pm.response.json();",
              "  if (data.file_id) {",
              "    pm.collectionVariables.set('pdf_file_id', data.file_id);",
              "  }",
              "}"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "formdata",
          "formdata": [
            {
              "key": "file",
              "type": "file",
              "src": "fixtures/sample_image_text.pdf"
            }
          ]
        },
        "url": {
          "raw": "{{base_url}}/upload/pdf",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "upload",
            "pdf"
          ]
        }
      }
    },
    {
      "name": "Debug Extract (PDF)",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "if (pm.response.code === 200) {",
              "  const data = pm.response.json();",
              "  if (data.text) {",
              "    pm.collectionVariables.set('extracted_text_json', JSON.stringify(data.text));",
              "  }",
              "  if (typeof data.pages !== 'undefined') {",
              "    pm.collectionVariables.set('extracted_pages', data.pages);",
              "  }",
              "}"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"file_id\": \"{{pdf_file_id}}\",\n  \"file_type\": \"pdf\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/debug/pipeline?break_at=extract",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "debug",
            "pipeline"
          ],
          "query": [
            {
              "key": "break_at",
              "value": "extract"
            }
          ]
        }
      }
    },
    {
      "name": "Upload Sample MP3",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "if (pm.response.code === 200) {",
              "  const data = pm.response.json();",
              "  if (data.file_id) {",
              "    pm.collectionVariables.set('audio_file_id', data.file_id);",
              "  }",
              "}"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "formdata",
          "formdata": [
            {
              "key": "file",
              "type": "file",
              "src": "fixtures/sample_clean.mp3"
            }
          ]
        },
        "url": {
          "raw": "{{base_url}}/upload/audio",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "upload",
            "audio"
          ]
        }
      }
    },
    {
      "name": "Debug Extract (Audio)",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "if (pm.response.code === 200) {",
              "  const data = pm.response.json();",
              "  if (data.transcript) {",
              "    pm.collectionVariables.set('transcript_text', data.transcript);",
              "  }",
              "}"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"file_id\": \"{{audio_file_id}}\",\n  \"file_type\": \"audio\",\n  \"language\": \"en\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/debug/pipeline?break_at=extract",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "debug",
            "pipeline"
          ],
          "query": [
            {
              "key": "break_at",
              "value": "extract"
            }
          ]
        }
      }
    },
    {
      "name": "Debug Chunk",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [
              "if (!pm.collectionVariables.get('extracted_text_json')) {",
              "  throw new Error('Missing extracted_text_json collection variable. Run the PDF extract request first.');",
              "}"
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "if (pm.response.code === 200) {",
              "  const data = pm.response.json();",
              "  if (Array.isArray(data.chunks)) {",
              "    pm.collectionVariables.set('chunks_payload', JSON.stringify(data.chunks));",
              "    const context = data.chunks.slice(0, 2).map(c => c.text);",
              "    pm.collectionVariables.set('context_payload', JSON.stringify(context));",
              "  }",
              "  if (data.counts) {",
              "    pm.collectionVariables.set('chunk_counts', JSON.stringify(data.counts));",
              "  }",
              "}"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"text\": {{extracted_text_json}},\n  \"chunk_size\": {{chunk_size}},\n  \"overlap\": {{chunk_overlap}}\n}"
        },
        "url": {
          "raw": "{{base_url}}/debug/pipeline?break_at=chunk",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "debug",
            "pipeline"
          ],
          "query": [
            {
              "key": "break_at",
              "value": "chunk"
            }
          ]
        }
      }
    },
    {
      "name": "Debug Embed",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [
              "if (!pm.collectionVariables.get('chunks_payload')) {",
              "  throw new Error('Missing chunks_payload collection variable. Run the chunk stage first.');",
              "}"
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "if (pm.response.code === 200) {",
              "  const data = pm.response.json();",
              "  if (data.vectors) {",
              "    pm.collectionVariables.set('vector_summary', JSON.stringify(data.vectors));",
              "  }",
              "  if (data.index_fingerprint) {",
              "    pm.collectionVariables.set('index_fingerprint', data.index_fingerprint);",
              "  }",
              "}"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"chunks\": {{chunks_payload}}\n}"
        },
        "url": {
          "raw": "{{base_url}}/debug/pipeline?break_at=embed",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "debug",
            "pipeline"
          ],
          "query": [
            {
              "key": "break_at",
              "value": "embed"
            }
          ]
        }
      }
    },
    {
      "name": "Debug Retrieve",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "if (pm.response.code === 200) {",
              "  const data = pm.response.json();",
              "  if (Array.isArray(data.hits)) {",
              "    pm.collectionVariables.set('hits_payload', JSON.stringify(data.hits));",
              "  }",
              "}"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"query\": \"{{sample_query}}\",\n  \"top_k\": {{top_k}}\n}"
        },
        "url": {
          "raw": "{{base_url}}/debug/pipeline?break_at=retrieve",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "debug",
            "pipeline"
          ],
          "query": [
            {
              "key": "break_at",
              "value": "retrieve"
            }
          ]
        }
      }
    },
    {
      "name": "Debug Generate",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [
              "if (!pm.collectionVariables.get('context_payload')) {",
              "  throw new Error('Missing context_payload collection variable. Run the chunk stage first.');",
              "}"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"query\": \"{{sample_query}}\",\n  \"context\": {{context_payload}}\n}"
        },
        "url": {
          "raw": "{{base_url}}/debug/pipeline?break_at=generate",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "debug",
            "pipeline"
          ],
          "query": [
            {
              "key": "break_at",
              "value": "generate"
            }
          ]
        }
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8000"
    },
    {
      "key": "chunk_size",
      "value": "500"
    },
    {
      "key": "chunk_overlap",
      "value": "60"
    },
    {
      "key": "sample_query",
      "value": "What are the main takeaways from the uploaded presentation?"
    },
    {
      "key": "top_k",
      "value": "5"
    }
  ]
}